import sys
import os
from subprocess import Popen
import subprocess

vc_srctree_classes = []

class FooMeta(type):
    def __init__(self, name, bases, attrs):
        print ("FooMeta.__init__: name=%s, bases=%s, attrs=%s"
               % (name, bases, attrs))
        cls = super(FooMeta, self).__init__(name, bases, attrs)
        if attrs['platform'] is not None:
            # register_foo_implementation(cls.platform, cls)
            vc_srctree_classes.append(cls)
        return cls

class VCSourceTree(object):
    __metaclass__ = FooMeta
    platform = None
    def __init__(self, srcdir):
        def check_class(cls):
            try:
                return cls(srcdir)
            except NotASourceTree():
                return None
        matches = filter(check_class, vc_srctree_classes)
        if len(matches) > 1:
            raise ("More than one source tree type detected for '%s'"
                   % (srcdir,))
        elif len(matches) < 1:
            raise "Source tree type for '%s' not detected" % (srcdir,)
        return matches[0]

def prog_stdout(call_list):
    p = Popen(call_list, stdout=subprocess.PIPE)
    stdout, stderr = p.communicate()
    return stdout.strip()

class NotASourceTree(Exception):
    pass

class GitSourceTree(VCSourceTree):
    platform = 'git'
    def __init__(self, srcdir):
        if "true" != prog_stdout(["git", "rev-parse",
                                  "--is-inside-work-tree"]):
            raise "Not a git sourcetree"
        self.top_srcdir = os.path.join(srcdir, FIXME)

class BzrSourceTree(VCSourceTree):
    platform = 'bzr'
    def __init__(self, srcdir):
        try:
            import bzrlib.workingtree
            wt,b = bzrlib.workingtree.WorkingTree.open_containing(".")
        except ImportError:
            raise NotASourceTree()
        self.wt = wt

class NBB(object):
    def __init__(self):
        srcdir = os.getcwd()
        self.sourcetree = VCSourceTree(srcdir)

def main(argv):
    prog = argv[0]
    idx = prog.rfind('/')
    if idx >= 0:
        prog = prog[idx+1:]
    for arg in argv[1:]:
        if arg in ('-h', '--help'):
            print "Usage: %(prog)s" % locals()
            return
        elif arg in ('-V', '--version'):
            print "%(prog)s (@PACKAGE_NAME@) @PACKAGE_VERSION@"
            return
        else:
            pass
    nbb = NBB()

if __name__ == '__main__':
    raise "This is not a library"

# Local Variables:
# mode: python
# End:
